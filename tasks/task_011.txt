# Task ID: 11
# Title: Implement oEmbed and Open Graph Integration
# Status: in-progress
# Dependencies: 10
# Priority: medium
# Description: Create oEmbed endpoint and Open Graph tags for social sharing and platform embedding.
# Details:
1. Build Docker image locally with the implementation
2. Set up Cloud SQL Proxy for local database connection
3. Create .env.local file with appropriate configuration
4. Test with real GCS bucket for thumbnails and audio files
5. Validate all MCP tools work in the local Docker environment
6. Test oEmbed and Open Graph functionality in local environment
7. Debug any issues before proceeding to deployment

```python
from flask import jsonify, request, url_for
import os

# UPDATED: Using correct FastMCP decorator
@mcp.custom_route('/oembed')
def oembed_endpoint():
    """oEmbed endpoint for platform embedding."""
    # Get URL parameter
    url = request.args.get('url')
    if not url or not url.startswith('https://loist.io/embed/'):
        return jsonify({
            "error": "Invalid URL parameter"
        }), 400
    
    # Extract UUID from URL
    uuid = url.split('/')[-1]
    
    # Get metadata from database
    metadata = get_audio_metadata(uuid)
    if not metadata:
        return jsonify({
            "error": "Audio not found"
        }), 404
    
    # Get optional width/height parameters
    max_width = request.args.get('maxwidth', 500, type=int)
    max_height = request.args.get('maxheight', 200, type=int)
    
    # Adjust dimensions to respect maxwidth/maxheight
    width = min(500, max_width)
    height = min(200, max_height)
    
    # Generate thumbnail URL
    thumbnail_url = None
    if metadata.get("thumbnail_path"):
        _, thumbnail_bucket_blob = metadata["thumbnail_path"].split("gs://", 1)
        thumbnail_bucket_name, thumbnail_blob_name = thumbnail_bucket_blob.split("/", 1)
        thumbnail_url = generate_signed_url(thumbnail_bucket_name, thumbnail_blob_name)
    
    # Format oEmbed response
    response = {
        "version": "1.0",
        "type": "rich",
        "title": metadata.get("title", "Untitled"),
        "author_name": metadata.get("artist", ""),
        "provider_name": "Loist",
        "provider_url": "https://loist.io",
        "html": f'<iframe src="https://loist.io/embed/{uuid}" width="{width}" height="{height}" frameborder="0"></iframe>',
        "width": width,
        "height": height
    }
    
    # Add thumbnail if available
    if thumbnail_url:
        response["thumbnail_url"] = thumbnail_url
        response["thumbnail_width"] = 600
        response["thumbnail_height"] = 600
    
    return jsonify(response)

# Add route for discovery - UPDATED: Using correct FastMCP decorator
@mcp.custom_route('/.well-known/oembed.json')
def oembed_discovery():
    """oEmbed discovery endpoint."""
    return jsonify({
        "provider_name": "Loist Music Library",
        "provider_url": "https://loist.io",
        "endpoints": [
            {
                "url": "https://loist.io/oembed",
                "formats": ["json"],
                "discovery": True
            }
        ]
    })
```

```html
<!-- Additional Open Graph tags for embed.html template -->
<meta property="og:site_name" content="Loist Music Library" />
<meta property="og:description" content="Listen to {{ metadata.title }} by {{ metadata.artist }}{% if metadata.album %} from the album {{ metadata.album }}{% endif %}" />

<!-- Additional Twitter Card tags -->
<meta name="twitter:title" content="{{ metadata.title }}" />
<meta name="twitter:description" content="{{ metadata.artist }}{% if metadata.album %} - {{ metadata.album }}{% endif %}" />
<meta name="twitter:image" content="{{ signed_thumbnail_url }}" />
```

# Test Strategy:
1. Build and test Docker image locally with the implementation
2. Set up Cloud SQL Proxy for local database connection
3. Create and configure .env.local file with appropriate settings
4. Test with real GCS bucket for thumbnails and audio files
5. Validate all MCP tools work in the local Docker environment
6. Test oEmbed endpoint with valid and invalid URLs
7. Verify oEmbed response format is correct
8. Test with various maxwidth/maxheight parameters
9. Validate Open Graph tags are correctly rendered
10. Test Twitter Card tags are correctly rendered
11. Verify discovery endpoint works correctly
12. Test with and without thumbnail images
13. Debug any issues before proceeding to deployment

# Subtasks:
## 1. Build Docker Image Locally [done]
### Dependencies: None
### Description: Create a local Docker image with the oEmbed and Open Graph implementation.
### Details:
Use the Dockerfile to build a local image. Ensure all dependencies are correctly installed and the application starts properly in the container.
<info added on 2025-10-15T12:00:02.135Z>
✅ COMPLETED: Successfully built Docker image locally
- Created loist-mcp-server:local Docker image using multi-stage build
- Image includes all dependencies and follows security best practices
- Multi-stage build optimized for production with non-root user
- All Python dependencies properly installed via wheels
- Image size optimized and ready for deployment
</info added on 2025-10-15T12:00:02.135Z>

## 2. Set Up Cloud SQL Proxy [done]
### Dependencies: 11.1
### Description: Configure Cloud SQL Proxy for local database connection.
### Details:
Download and set up Cloud SQL Proxy. Configure it to connect to the development or staging database. Verify database connectivity from the Docker container.
<info added on 2025-10-15T12:00:04.614Z>
✅ COMPLETED: Cloud SQL Proxy successfully configured and running
- Created comprehensive setup script for Cloud SQL Proxy
- Successfully started cloud-sql-proxy-local container
- Proxy running on 127.0.0.1:5432 for secure database connections
- Connected to loist-music-library:us-central1:loist-music-library-db
- Container logs show: "The proxy has started successfully and is ready for new connections!"
</info added on 2025-10-15T12:00:04.614Z>

## 3. Create .env.local Configuration [done]
### Dependencies: None
### Description: Set up local environment variables for testing.
### Details:
Create a .env.local file with all necessary configuration variables. Include database connection strings, GCS bucket names, and any API keys or secrets needed for local testing.
<info added on 2025-10-15T12:00:06.554Z>
Local environment configuration created and validated:
- Created comprehensive .env.local file with all necessary variables
- Fixed environment variable types (removed quotes from numeric values to fix Pydantic validation)
- Organized configuration into logical sections (Server, GCS, Database, CORS, etc.)
- Created setup verification script to check local development environment
- All components verified: Docker image, service account, Cloud SQL Proxy
</info added on 2025-10-15T12:00:06.554Z>

## 9. Fix FastMCP Decorator Bug [done]
### Dependencies: 11.1, 11.2, 11.3
### Description: Resolve critical bug with FastMCP decorator usage
### Details:
- Identified that @mcp.get() is not a valid FastMCP decorator
- Researched correct FastMCP API using Perplexity
- Fixed by replacing @mcp.get() with @mcp.custom_route()
- Verified server now starts successfully without errors
- Updated all route definitions to use the correct decorator pattern

## 4. Test with Real GCS Buckets [pending]
### Dependencies: 11.1, 11.3, 11.9
### Description: Verify functionality with actual Google Cloud Storage buckets.
### Details:
Configure the application to use real GCS buckets for thumbnails and audio files. Test uploading, retrieving, and generating signed URLs for these resources. Ensure the fixed FastMCP decorators work correctly with GCS operations.

## 5. Validate MCP Tools Functionality [pending]
### Dependencies: 11.1, 11.2, 11.3, 11.4, 11.9
### Description: Ensure all Music Content Platform tools work in the local Docker environment.
### Details:
Test each MCP tool and feature to verify they function correctly in the local Docker environment. Address any issues that arise during testing. Confirm that the FastMCP decorator fix works for all routes.

## 6. Test oEmbed Endpoint Locally [pending]
### Dependencies: 11.1, 11.2, 11.3, 11.9
### Description: Verify the oEmbed endpoint functions correctly in the local environment.
### Details:
Test the oEmbed endpoint with various valid and invalid URLs. Verify response format, error handling, and parameter processing. Ensure the @mcp.custom_route() decorator is working correctly for the oEmbed endpoint.

## 7. Test Open Graph and Twitter Card Tags [pending]
### Dependencies: 11.1, 11.2, 11.3, 11.9
### Description: Validate that meta tags are correctly rendered in the local environment.
### Details:
Inspect HTML responses to verify Open Graph and Twitter Card meta tags are correctly included and populated with appropriate values. Test with various metadata combinations to ensure proper rendering.

## 8. Debug and Fix Issues [pending]
### Dependencies: 11.5, 11.6, 11.7
### Description: Identify and resolve any problems before deployment.
### Details:
Document and fix any issues discovered during local testing. Ensure all functionality works correctly before proceeding to deployment. Verify that the FastMCP decorator fix is working consistently across all routes.

