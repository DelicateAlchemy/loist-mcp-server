# Task ID: 3
# Title: Implement HTTP URL Audio Downloader
# Status: in-progress
# Dependencies: 1
# Priority: high
# Description: Create a module to download audio files from HTTP/HTTPS URLs with validation and error handling.
# Details:
1. Implement HTTP/HTTPS URL downloader with requests library
2. Add validation for file size (HEAD request before download)
3. Implement timeout handling and retry logic
4. Add SSRF protection (block private IP ranges)
5. Validate URL schemes against allowlist
6. Implement temporary file storage during download
7. Add progress tracking for large files

```python
import requests
import os
import tempfile
import ipaddress
from urllib.parse import urlparse

def is_private_ip(url):
    """Check if URL points to a private IP address (SSRF protection)."""
    hostname = urlparse(url).hostname
    try:
        ip = ipaddress.ip_address(hostname)
        return ip.is_private
    except ValueError:
        # Not an IP address, need to resolve hostname
        return False  # For MVP, we'll trust DNS resolution

def download_audio_from_url(url, headers=None, max_size_mb=100):
    """Download audio file from URL with validation."""
    # Validate URL scheme
    if not url.startswith(('http://', 'https://')):
        raise ValueError("Only HTTP and HTTPS URLs are supported")
    
    # SSRF protection
    if is_private_ip(url):
        raise ValueError("URLs pointing to private IP addresses are not allowed")
    
    # Check file size before downloading
    resp = requests.head(url, headers=headers, timeout=10)
    resp.raise_for_status()
    
    content_length = int(resp.headers.get('Content-Length', 0))
    if content_length > max_size_mb * 1024 * 1024:
        raise ValueError(f"File size exceeds maximum allowed size of {max_size_mb}MB")
    
    # Download file to temporary location
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        with requests.get(url, headers=headers, stream=True, timeout=60) as resp:
            resp.raise_for_status()
            for chunk in resp.iter_content(chunk_size=8192):
                temp_file.write(chunk)
        
        return temp_file.name
```

# Test Strategy:
1. Test downloading files of various sizes and formats
2. Verify size validation works correctly
3. Test timeout handling and retry logic
4. Validate SSRF protection blocks private IP addresses
5. Test URL scheme validation
6. Verify temporary file creation and cleanup
7. Test with various HTTP status codes and error conditions
8. Validate handling of redirects

# Subtasks:
## 1. Implement HTTP/HTTPS Download Logic [done]
### Dependencies: None
### Description: Develop the core functionality to download files over HTTP and HTTPS, handling protocol-specific requirements.
### Details:
Ensure support for both HTTP and HTTPS protocols, manage request/response cycles, and handle partial content retrieval if needed.
<info added on 2025-10-09T14:28:03.292Z>
# HTTP/HTTPS Downloader Implementation - Completed

## Implementation Summary
- Created HTTPDownloader class in src/downloader/http_downloader.py
- Implemented streaming downloads with configurable chunk size (8192 bytes)
- Added automatic retry logic with exponential backoff (3 retries default)
- Configured retry strategy for transient failures (429, 500, 502, 503, 504)
- Implemented URL scheme validation for HTTP/HTTPS protocols
- Added file size validation with HEAD requests
- Created context manager for automatic session cleanup

## Key Features
- Memory-efficient streaming download
- File size validation before and during download
- Configurable timeout (60 seconds default)
- HTTP redirect support
- Custom headers support for authentication
- Progress tracking via callback function
- Temporary file management with automatic cleanup
- File extension detection from URLs

## Error Handling
- Custom exception hierarchy for different error types
- Automatic cleanup of partial files on failure
- Comprehensive error messages
- Retry logic for network failures
- Timeout protection against hanging downloads

## Security Features
- Protocol validation (HTTP/HTTPS only)
- File size limits (100MB default, configurable)
- Timeout protection
- Partial file cleanup on errors
- Custom User-Agent header

## Testing & Documentation
- 30+ comprehensive tests in tests/test_http_downloader.py
- Complete documentation in docs/task-3.1-http-downloader.md

## Files Created
- src/downloader/__init__.py
- src/downloader/http_downloader.py
- tests/test_http_downloader.py
- docs/task-3.1-http-downloader.md
</info added on 2025-10-09T14:28:03.292Z>

## 2. Validate URL Scheme [pending]
### Dependencies: 3.1
### Description: Check and validate the URL scheme to ensure only allowed protocols (HTTP/HTTPS) are processed.
### Details:
Reject URLs with unsupported or potentially dangerous schemes (e.g., file://, ftp://) before initiating download.

## 3. Apply SSRF Protection [pending]
### Dependencies: 3.2
### Description: Implement safeguards against Server-Side Request Forgery (SSRF) attacks during URL processing and download.
### Details:
Validate URLs to prevent access to internal IP ranges, localhost, or other restricted resources.

## 4. Handle File Size Validation [pending]
### Dependencies: 3.3
### Description: Check the file size before and during download to enforce limits and prevent resource exhaustion.
### Details:
Use HTTP HEAD requests or Content-Length headers to validate file size prior to download; abort if size exceeds limits.

## 5. Manage Timeout and Retry Logic [pending]
### Dependencies: 3.4
### Description: Implement timeout settings and retry mechanisms to handle network errors and ensure robust downloads.
### Details:
Set reasonable timeouts for connections and data transfer; define retry policies for transient failures.

## 6. Temporary File Management [pending]
### Dependencies: 3.5
### Description: Safely store downloaded data in temporary files, ensuring cleanup and atomic operations.
### Details:
Write to temporary files during download, handle interruptions, and securely move files upon completion.

## 7. Implement Progress Tracking [pending]
### Dependencies: 3.6
### Description: Track and report download progress to the user or calling system.
### Details:
Monitor bytes downloaded, update progress indicators, and handle partial downloads if supported.

