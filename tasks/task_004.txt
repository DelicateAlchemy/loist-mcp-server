# Task ID: 4
# Title: Implement Audio Metadata Extraction
# Status: in-progress
# Dependencies: 3
# Priority: high
# Description: Create a module to extract ID3 tags and technical audio specifications from downloaded audio files.
# Details:
1. Use mutagen library to extract ID3 tags (artist, title, album, genre, year)
2. Use pydub/ffmpeg to analyze audio characteristics (duration, channels, sample rate, bitrate)
3. Extract embedded album artwork if available
4. Implement format validation for supported formats (MP3, AAC, FLAC, WAV)
5. Handle missing or incomplete metadata gracefully

```python
from mutagen import File as MutagenFile
from mutagen.id3 import ID3
from pydub import AudioSegment
import os
import tempfile

def extract_metadata(file_path):
    """Extract metadata from audio file using mutagen."""
    # Basic file validation
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"File not found: {file_path}")
    
    # Extract ID3 tags
    audio_file = MutagenFile(file_path)
    if audio_file is None:
        raise ValueError(f"Unsupported audio format or corrupted file: {file_path}")
    
    # Initialize metadata dict
    metadata = {
        "artist": None,
        "title": None,
        "album": None,
        "genre": None,
        "year": None,
        "duration": None,
        "channels": None,
        "sample_rate": None,
        "bitrate": None,
        "format": None
    }
    
    # Extract ID3 tags (format-specific handling)
    if hasattr(audio_file, 'tags') and audio_file.tags:
        tags = audio_file.tags
        # Extract common tags (implementation varies by format)
        if 'TPE1' in tags:  # Artist
            metadata['artist'] = str(tags['TPE1'])
        if 'TIT2' in tags:  # Title
            metadata['title'] = str(tags['TIT2'])
        if 'TALB' in tags:  # Album
            metadata['album'] = str(tags['TALB'])
        if 'TCON' in tags:  # Genre
            metadata['genre'] = str(tags['TCON'])
        if 'TDRC' in tags:  # Year
            try:
                metadata['year'] = int(str(tags['TDRC']).split('-')[0])
            except (ValueError, IndexError):
                pass
    
    # Extract technical specs using pydub
    try:
        audio = AudioSegment.from_file(file_path)
        metadata['duration'] = len(audio) / 1000.0  # Convert ms to seconds
        metadata['channels'] = audio.channels
        metadata['sample_rate'] = audio.frame_rate
        metadata['bitrate'] = audio.frame_width * 8 * audio.frame_rate
        
        # Determine format from file extension
        _, ext = os.path.splitext(file_path)
        metadata['format'] = ext.lstrip('.').upper()
    except Exception as e:
        print(f"Error extracting audio specs: {e}")
    
    return metadata

def extract_artwork(file_path):
    """Extract album artwork from ID3 tags if available."""
    try:
        tags = ID3(file_path)
        for tag in tags.values():
            if tag.FrameID == 'APIC':
                artwork_data = tag.data
                # Save artwork to temporary file
                with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
                    temp_file.write(artwork_data)
                    return temp_file.name
    except Exception as e:
        print(f"Error extracting artwork: {e}")
    
    return None
```

# Test Strategy:
1. Test with various audio formats (MP3, AAC, FLAC, WAV)
2. Verify ID3 tag extraction accuracy
3. Test with files having incomplete or missing metadata
4. Validate technical specs extraction (duration, channels, sample rate, bitrate)
5. Test artwork extraction from different ID3 tag versions
6. Verify format detection works correctly
7. Test with corrupted or invalid audio files

# Subtasks:
## 1. ID3 Tag Extraction [done]
### Dependencies: None
### Description: Extract ID3 tags from audio files to retrieve embedded metadata such as title, artist, and album.
### Details:
Use libraries like Mutagen or TagLib to parse ID3 tags from MP3 files. Ensure support for different tag versions and handle format-specific parsing.
<info added on 2025-10-09T14:50:26.394Z>
**ID3 Tag Extraction Implementation Summary:**

The MetadataExtractor class has been successfully implemented in src/metadata/extractor.py with the following capabilities:
- Extracts metadata from multiple audio formats: MP3 (ID3v1, ID3v2.3, ID3v2.4), FLAC/OGG (Vorbis comments), M4A/AAC (MP4 tags), and WAV (RIFF INFO)
- Extracts comprehensive metadata fields including artist, title, album, genre, year, duration, channels, sample rate, bitrate, and format
- Implements robust error handling for file not found, unsupported formats, missing tags, invalid formats, and corrupted files
- Provides fallback mechanisms between tag versions and uses filename as fallback title when tag is missing

Complete documentation is available in docs/task-4.1-id3-tag-extraction.md, including supported formats reference, tag mapping, usage examples, and best practices. A comprehensive test suite with 20+ tests has been created in tests/test_metadata_extraction.py.
</info added on 2025-10-09T14:50:26.394Z>

## 2. Technical Specification Extraction [done]
### Dependencies: None
### Description: Extract technical metadata including duration, sample rate, bit depth, and channel count from audio files.
### Details:
Utilize tools such as FFmpeg, Libsndfile, or pydub to access technical properties. Ensure compatibility with multiple audio formats and validate extracted data.
<info added on 2025-10-09T14:55:40.459Z>
**TASK 4.2 VERIFIED AS COMPLETE! ✅**

**Technical Specification Extraction Implementation:**

All required functionality was implemented in subtask 4.1 as part of the MetadataExtractor.extract() method:

**Technical Specs Extracted:**
- duration: From audio.info.length (seconds with 3 decimal precision)
- channels: From audio.info.channels (1=mono, 2=stereo, etc.)
- sample_rate: From audio.info.sample_rate (Hz)
- bitrate: From audio.info.bitrate (converted to kbps)
- bit_depth: From audio.info.bits_per_sample or sample_width
- format: From file extension (uppercase)

**Enhancements Made:**
- Added bit_depth field to metadata structure
- Implemented bits_per_sample extraction (FLAC, WAV)
- Implemented sample_width extraction with conversion (WAV)
- Added 6 comprehensive tests for technical specs

**Code Location:** src/metadata/extractor.py
- Lines ~300-318: Technical specification extraction
- Handles missing specs gracefully (hasattr checks)
- Converts bitrate from bps to kbps
- Converts sample_width (bytes) to bit_depth (bits)
- Rounds duration to 3 decimal places

**Format Support:**
- MP3: duration, channels, sample_rate, bitrate
- FLAC: duration, channels, sample_rate, bitrate, bit_depth
- M4A/AAC: duration, channels, sample_rate, bitrate
- OGG: duration, channels, sample_rate, bitrate
- WAV: duration, channels, sample_rate, bit_depth

**Testing** (tests/test_metadata_extraction.py):
- Added TestTechnicalSpecExtraction class with 6 tests
- Duration extraction test
- Channels extraction test
- Sample rate extraction test
- Bitrate extraction test
- Bit depth extraction test
- All specs combined test

**Documentation** (docs/task-4.2-technical-specs.md):
- Technical specifications reference
- Format-specific details
- Common values guide
- Usage examples

**Verification:** ✅ Complete - All requirements met (duration, sample rate, bit depth, channel count)
</info added on 2025-10-09T14:55:40.459Z>

## 3. Artwork Extraction [done]
### Dependencies: None
### Description: Extract embedded artwork (album cover images) from audio files where available.
### Details:
Use metadata libraries capable of reading image data from audio file tags (e.g., Mutagen for MP3, Vorbis comments for FLAC/Ogg). Handle image format conversion if necessary.
<info added on 2025-10-09T15:04:03.952Z>
**TASK 4.3 SUCCESSFULLY COMPLETED! ✅**

**Artwork Extraction Implementation:**
- Implemented comprehensive artwork extraction for multiple audio formats
- Created format-specific extraction methods for MP3, FLAC, M4A/AAC, OGG
- Added picture type prioritization (front cover preferred)
- Implemented MIME type to file extension conversion
- Supports saving to temporary files or specific destinations

**Format Support:**
- MP3: APIC frames from ID3 tags
- FLAC: Picture blocks from metadata
- M4A/AAC: covr atom from MP4 tags
- OGG: METADATA_BLOCK_PICTURE from Vorbis comments
- Automatic format detection from file extension

**Artwork Features:**
- Picture type priority system (front cover > other > back cover)
- MIME type detection (JPEG, PNG, GIF, BMP, WebP)
- PNG signature detection for MP4 files
- Temporary file creation with proper extensions
- Custom destination path support
- Graceful handling when no artwork present (returns None)

**Implementation Details:**
- MetadataExtractor.extract_artwork() - Main entry point
- _extract_artwork_mp3() - APIC frame extraction
- _extract_artwork_flac() - FLAC picture block extraction
- _extract_artwork_mp4() - MP4 covr atom extraction
- _extract_artwork_ogg() - OGG picture extraction
- _mime_to_extension() - MIME to extension conversion

**Testing** (tests/test_metadata_extraction.py):
- Added TestArtworkExtraction class with 8 comprehensive tests
- MP3 artwork extraction tests (APIC frames)
- FLAC artwork extraction tests (Picture blocks)
- M4A artwork extraction tests (JPEG and PNG)
- No artwork handling tests
- Custom destination tests
- Front cover priority tests
- File not found error tests

**Documentation** (docs/task-4.3-artwork-extraction.md):
- Complete artwork extraction guide
- Supported formats and methods
- Picture type reference
- Usage examples
- Integration examples with GCS upload
- Best practices

**Files Created/Modified:**
- src/metadata/extractor.py - Added artwork extraction methods (250+ lines)
- src/metadata/__init__.py - Added extract_artwork export
- tests/test_metadata_extraction.py - Added 8 artwork tests
- docs/task-4.3-artwork-extraction.md - Documentation
</info added on 2025-10-09T15:04:03.952Z>

## 4. Format Validation [done]
### Dependencies: None
### Description: Validate the audio file format and ensure it meets expected standards for metadata extraction.
### Details:
Check file headers and structure using format-specific libraries. Confirm support for target formats (MP3, FLAC, WAV, Ogg, etc.) and reject unsupported or malformed files.
<info added on 2025-10-09T15:12:34.681Z>
**Format Validation Implementation**

Created comprehensive FormatValidator class in src/metadata/format_validator.py that validates audio files through multiple methods:
- Magic number (file signature) validation for MP3, FLAC, WAV, Ogg, M4A/AAC formats
- Auto-detection of file format from content
- Extension vs. signature mismatch detection
- Corrupted file detection via signature validation

Key validation features include:
- validate_signature() - Check file signature matches expected format
- validate_file() - Comprehensive validation (existence, size, signature)
- is_supported_format() - Check if extension is supported
- detect_format() - Auto-detect format from signature
- read_file_signature() - Read first 12 bytes for validation

Implementation provides security benefits by detecting malicious files disguised as audio, corrupted files, mislabeled files, and preventing processing of non-audio files.

Created comprehensive test suite with 24 tests (all passing) and complete documentation in docs/task-4.4-format-validation.md including format validation guide, file signature reference table, and integration patterns.
</info added on 2025-10-09T15:12:34.681Z>

## 5. Error Handling for Missing or Corrupt Metadata [pending]
### Dependencies: 4.1, 4.2, 4.3, 4.4
### Description: Implement robust error handling for cases where metadata is missing, incomplete, or corrupt.
### Details:
Detect and log missing or corrupt metadata fields. Provide fallback mechanisms or user notifications. Ensure extraction processes do not fail silently.

## 6. Support for Multiple Audio Formats [pending]
### Dependencies: 4.1, 4.2, 4.3, 4.4, 4.5
### Description: Ensure the extraction and validation processes work across a range of audio formats.
### Details:
Integrate format-specific extraction logic and libraries. Test with MP3, FLAC, WAV, Ogg, and others. Maintain extensibility for future format support.

