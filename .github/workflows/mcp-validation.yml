name: MCP Server Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: music-library-mcp:ci

jobs:
  mcp-server-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build MCP Server Docker Image
      run: |
        echo "üê≥ Building Docker image..."
        docker build -t $DOCKER_IMAGE .
        
    - name: Make test scripts executable
      run: |
        chmod +x run_mcp_stdio_docker.sh
        chmod +x test_mcp_tools_ci.sh
        chmod +x test_mcp_resources_ci.sh
        chmod +x scripts/validate_mcp_results.js
        
    - name: Run Enhanced MCP Tools Tests
      id: test-tools
      run: |
        echo "üß™ Running MCP Tools CI Tests..."
        ./test_mcp_tools_ci.sh
        
    - name: Run Enhanced MCP Resources Tests  
      id: test-resources
      run: |
        echo "üß™ Running MCP Resources CI Tests..."
        ./test_mcp_resources_ci.sh
        
    - name: Validate MCP Protocol Compliance
      id: validate-protocol
      run: |
        echo "üîç Validating MCP Protocol Compliance..."
        node scripts/validate_mcp_results.js
        
    - name: Check Quality Gates
      id: quality-gates
      run: |
        echo "üö™ Checking Quality Gates..."
        
        # Parse validation report
        if [ -f mcp_validation_report.json ]; then
          # Extract key metrics using basic JSON parsing
          status=$(grep -o '"status":"[^"]*"' mcp_validation_report.json | cut -d'"' -f4)
          total_tests=$(grep -o '"totalTests":[0-9]*' mcp_validation_report.json | cut -d':' -f2)
          total_failed=$(grep -o '"totalFailed":[0-9]*' mcp_validation_report.json | cut -d':' -f2)
          protocol_compliance=$(grep -o '"protocolCompliance":[0-9]*' mcp_validation_report.json | cut -d':' -f2)
          
          echo "üìä Quality Gate Results:"
          echo "  Status: $status"
          echo "  Total Tests: $total_tests"
          echo "  Failed Tests: $total_failed"
          echo "  Protocol Compliant Responses: $protocol_compliance"
          
          # Quality gate: No failed tests allowed
          if [ "$total_failed" -gt 0 ]; then
            echo "‚ùå Quality Gate FAILED: $total_failed tests failed"
            exit 1
          fi
          
          # Quality gate: Must have protocol compliant responses
          if [ "$protocol_compliance" -lt 3 ]; then
            echo "‚ùå Quality Gate FAILED: Insufficient protocol compliant responses ($protocol_compliance < 3)"
            exit 1
          fi
          
          echo "‚úÖ All Quality Gates PASSED"
        else
          echo "‚ùå Validation report not found"
          exit 1
        fi
        
    - name: Performance Analysis
      id: performance
      if: always()
      run: |
        echo "‚ö° Performance Analysis..."
        
        # Extract performance data from test results
        if [ -f mcp_tools_results.json ] && [ -f mcp_resources_results.json ]; then
          echo "üìà Performance Metrics:"
          
          # Find slowest tests
          echo "üêå Slowest Tests:"
          if command -v jq >/dev/null 2>&1; then
            jq -r '.tests[] | select(.duration > 1) | "  \(.name): \(.duration)s"' mcp_tools_results.json mcp_resources_results.json || echo "  No slow tests found"
          else
            grep -o '"duration":[0-9.]*' mcp_tools_results.json mcp_resources_results.json | head -5 || echo "  Performance data parsing requires jq"
          fi
        fi
        
    - name: Generate Test Report Summary
      if: always()
      run: |
        echo "üìã Generating Test Report Summary..."
        
        # Create comprehensive summary for GitHub
        cat > test_summary.md << 'EOF'
        # MCP Server Validation Report
        
        ## Overview
        EOF
        
        if [ -f mcp_validation_report.json ]; then
          status=$(grep -o '"status":"[^"]*"' mcp_validation_report.json | cut -d'"' -f4)
          total_tests=$(grep -o '"totalTests":[0-9]*' mcp_validation_report.json | cut -d':' -f2)
          total_passed=$(grep -o '"totalPassed":[0-9]*' mcp_validation_report.json | cut -d':' -f2)
          total_failed=$(grep -o '"totalFailed":[0-9]*' mcp_validation_report.json | cut -d':' -f2)
          
          cat >> test_summary.md << EOF
        - **Status**: $status
        - **Total Tests**: $total_tests
        - **Passed**: $total_passed  
        - **Failed**: $total_failed
        
        ## Test Suites
        
        ### MCP Tools Tests
        EOF
          
          if [ -f mcp_tools_results.json ]; then
            echo "- Health Check: ‚úÖ" >> test_summary.md
            echo "- Error Validation: ‚úÖ" >> test_summary.md
            echo "- Exception Serialization: ‚úÖ" >> test_summary.md
          fi
          
          cat >> test_summary.md << 'EOF'
        
        ### MCP Resources Tests
        EOF
          
          if [ -f mcp_resources_results.json ]; then
            echo "- URI Parsing: ‚úÖ" >> test_summary.md
            echo "- Resource Access: ‚úÖ" >> test_summary.md
            echo "- Error Handling: ‚úÖ" >> test_summary.md
          fi
        fi
        
        # Add summary to GitHub step summary
        cat test_summary.md >> $GITHUB_STEP_SUMMARY
        
    - name: Upload Test Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mcp-test-results
        path: |
          mcp_tools_results.json
          mcp_resources_results.json
          mcp_validation_report.json
          test_summary.md
        retention-days: 30
        
    - name: Upload Failure Artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: mcp-test-failures
        path: |
          *.log
          *.txt
        retention-days: 7
        
    - name: Comment PR with Results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üß™ MCP Server Validation Results\n\n';
          
          if (fs.existsSync('test_summary.md')) {
            const summary = fs.readFileSync('test_summary.md', 'utf8');
            comment += summary;
          } else {
            comment += '‚ùå Test summary not available\n';
          }
          
          // Add link to artifacts
          comment += '\nüìÅ [View detailed test results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
