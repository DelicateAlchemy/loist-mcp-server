name: Cloud Run Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  PROJECT_ID: loist-music-library
  SERVICE_NAME: music-library-mcp
  REGION: us-central1
  IMAGE_NAME: gcr.io/loist-music-library/music-library-mcp

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCLOUD_SERVICE_KEY }}
        
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: 'latest'
        
    - name: Configure Docker for GCR
      run: |
        echo "üîê Configuring Docker authentication for Google Container Registry..."
        gcloud auth configure-docker --quiet
        
    - name: Build Docker image
      run: |
        echo "üê≥ Building Docker image for Cloud Run..."
        docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.IMAGE_NAME }}:latest
        
    - name: Push Docker image to GCR
      run: |
        echo "üì§ Pushing Docker image to Google Container Registry..."
        docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.IMAGE_NAME }}:latest
        
    - name: Deploy to Cloud Run
      id: deploy
      run: |
        echo "üöÄ Deploying to Cloud Run..."
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 1 \
          --timeout 600s \
          --concurrency 80 \
          --max-instances 10 \
          --min-instances 0 \
          --port 8080 \
          --set-env-vars "SERVER_TRANSPORT=http,LOG_LEVEL=INFO,AUTH_ENABLED=false,ENABLE_CORS=true,CORS_ORIGINS=*,ENABLE_HEALTHCHECK=true" \
          --set-env-vars "DB_CONNECTION_NAME=${{ secrets.DB_CONNECTION_NAME }},GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }},GCS_PROJECT_ID=${{ env.PROJECT_ID }}" \
          --service-account ${{ secrets.CLOUD_RUN_SERVICE_ACCOUNT }} \
          --quiet
          
    - name: Get service URL
      id: url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --format 'value(status.url)')
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "üåê Service deployed at: $SERVICE_URL"
        
    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment health..."
        sleep 30  # Wait for service to be ready
        
        # Test health endpoint
        HEALTH_URL="${{ steps.url.outputs.SERVICE_URL }}/mcp/health"
        echo "Testing health endpoint: $HEALTH_URL"
        
        # Retry health check up to 5 times
        for i in {1..5}; do
          if curl -f -s "$HEALTH_URL" > /dev/null; then
            echo "‚úÖ Health check passed on attempt $i"
            break
          else
            echo "‚è≥ Health check failed on attempt $i, retrying..."
            sleep 10
          fi
          
          if [ $i -eq 5 ]; then
            echo "‚ùå Health check failed after 5 attempts"
            exit 1
          fi
        done
        
    - name: Update service traffic
      run: |
        echo "üîÑ Updating traffic to new revision..."
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
          --to-latest \
          --region ${{ env.REGION }} \
          --quiet
          
    - name: Deployment summary
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "üìä Deployment Summary:"
        echo "  - Project: ${{ env.PROJECT_ID }}"
        echo "  - Service: ${{ env.SERVICE_NAME }}"
        echo "  - Region: ${{ env.REGION }}"
        echo "  - Image: ${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "  - URL: ${{ steps.url.outputs.SERVICE_URL }}"
        echo "  - Commit: ${{ github.sha }}"
        echo "  - Branch: ${{ github.ref_name }}"
        
        # Get service details
        echo "üìã Service Configuration:"
        gcloud run services describe ${{ env.SERVICE_NAME }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --format="table(
            metadata.name,
            status.url,
            spec.template.spec.containers[0].image,
            spec.template.metadata.annotations['run.googleapis.com/cpu'],
            spec.template.spec.containers[0].resources.limits.memory,
            status.conditions[0].status
          )"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Deployment Success Notification
      if: needs.deploy.result == 'success'
      run: |
        echo "‚úÖ Cloud Run deployment succeeded!"
        echo "Service is now live and serving traffic."
        
    - name: Deployment Failure Notification
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Cloud Run deployment failed!"
        echo "Please check the logs and retry the deployment."
        exit 1
