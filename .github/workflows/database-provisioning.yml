name: Database Provisioning

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'provision'
        type: choice
        options:
          - provision
          - migrate
          - test
          - health-check
  push:
    branches:
      - main
      - dev
    paths:
      - 'database/**'
      - 'scripts/create-cloud-sql-instance.sh'
      - '.github/workflows/database-provisioning.yml'
  pull_request:
    paths:
      - 'database/**'
      - 'scripts/create-cloud-sql-instance.sh'

env:
  PROJECT_ID: loist-music-library
  REGION: us-central1
  INSTANCE_NAME: loist-music-library-db
  DATABASE_NAME: music_library

jobs:
  provision:
    name: Database Provisioning
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'provision'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Verify authentication
        run: |
          gcloud auth list
          gcloud config list

      - name: Check if instance exists
        id: check-instance
        run: |
          if gcloud sql instances describe ${{ env.INSTANCE_NAME }} --project=${{ env.PROJECT_ID }} 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Provision Cloud SQL instance
        if: steps.check-instance.outputs.exists == 'false'
        run: |
          chmod +x scripts/create-cloud-sql-instance.sh
          ./scripts/create-cloud-sql-instance.sh

      - name: Instance already exists
        if: steps.check-instance.outputs.exists == 'true'
        run: echo "Cloud SQL instance already exists. Skipping provisioning."

  migrate:
    name: Database Migration
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'migrate' ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Install Cloud SQL Proxy
        run: |
          curl -o cloud_sql_proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.8.0/cloud-sql-proxy.linux.amd64
          chmod +x cloud_sql_proxy
          sudo mv cloud_sql_proxy /usr/local/bin/

      - name: Start Cloud SQL Proxy
        run: |
          cloud_sql_proxy --port=5432 ${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.INSTANCE_NAME }} &
          sleep 5

      - name: Run database migrations
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: ${{ env.DATABASE_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          python database/migrate.py --action=up --database-url="postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@localhost:5432/${{ env.DATABASE_NAME }}"

      - name: Verify migration
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: ${{ env.DATABASE_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          python database/migrate.py --action=status --database-url="postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@localhost:5432/${{ env.DATABASE_NAME }}"

  test:
    name: Database Tests
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'test' ||
      github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          pip install pytest pytest-cov pytest-asyncio

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Install Cloud SQL Proxy
        run: |
          curl -o cloud_sql_proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.8.0/cloud-sql-proxy.linux.amd64
          chmod +x cloud_sql_proxy
          sudo mv cloud_sql_proxy /usr/local/bin/

      - name: Start Cloud SQL Proxy
        run: |
          cloud_sql_proxy --port=5432 ${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.INSTANCE_NAME }} &
          sleep 5

      - name: Run database tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: ${{ env.DATABASE_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          pytest tests/test_database_pool.py tests/test_migrations.py -v --cov=database --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: database
          name: database-coverage

  health-check:
    name: Database Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'health-check'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Check Cloud SQL instance status
        run: |
          gcloud sql instances describe ${{ env.INSTANCE_NAME }} --project=${{ env.PROJECT_ID }} --format="table(state,databaseVersion,settings.tier,region)"

      - name: Install Cloud SQL Proxy
        run: |
          curl -o cloud_sql_proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.8.0/cloud-sql-proxy.linux.amd64
          chmod +x cloud_sql_proxy
          sudo mv cloud_sql_proxy /usr/local/bin/

      - name: Start Cloud SQL Proxy
        run: |
          cloud_sql_proxy --port=5432 ${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.INSTANCE_NAME }} &
          sleep 5

      - name: Test database connection
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: ${{ env.DATABASE_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          python -c "
          import psycopg2
          import sys
          try:
              conn = psycopg2.connect(
                  host='localhost',
                  port=5432,
                  dbname='${{ env.DATABASE_NAME }}',
                  user='${{ secrets.DB_USER }}',
                  password='${{ secrets.DB_PASSWORD }}'
              )
              cur = conn.cursor()
              cur.execute('SELECT version();')
              version = cur.fetchone()[0]
              print(f'✅ Database connection successful!')
              print(f'PostgreSQL version: {version}')
              cur.close()
              conn.close()
          except Exception as e:
              print(f'❌ Database connection failed: {e}')
              sys.exit(1)
          "
